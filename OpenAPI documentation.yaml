openapi: 3.0.0
components:
  securitySchemes:
    Authentication-Token:
      type: apiKey
      in: header
      name: Authentication-Token
info:
  title: Flashcard Application Open API Documentation
  version: 1.0.0

  description: >
    This project is a Flashcard application for flashcards generation and
    reviewing. Users can create their decks in which they can create flashcards.
    The front and back of the flashcard are entered by the user while creating
    flashcards. The users can review their flashcards through a quiz and their
    dashboard stores information like their average score on a particular deck,
    last quiz score and last review time.

    <h2> User Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>user_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>email</td>
        <td>String</td>
        <td>Not Null, Unique</td>
      </tr>
      <tr>
        <td>password</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>  
      <tr>
        <td>active</td>
        <td>Boolean</td>
        <td></td>
      </tr>
       <tr>
        <td>fs_uniquifier</td>
        <td>String</td>
        <td>Not Null, Unique</td>
      </tr>
    </tbody>
    </table>
    
    <h2> Card Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>card_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>card_front</td>
        <td>String</td>
        <td>Not Null, Unique</td>
      </tr>
      <tr>
        <td>card_back</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>
    </tbody>
    </table>
    
    <h2> Deck Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>deck_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>deck_name</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>
      <tr>
        <td>deck_total_score</td>
        <td>Float</td>
        <td></td>
      </tr>
      <tr>
        <td>deck_average_score</td>
        <td>Float</td>
        <td></td>
      </tr>
      <tr>
        <td>correct</td>
        <td>Integer</td>
        <td></td>
      </tr>
      <tr>
        <td>time</td>
        <td>String</td>
        <td></td>
      </tr>
      <tr>
        <td>quiz_count</td>
        <td>Integer</td>
        <td></td>
      </tr>
    </tbody>
    </table>
    
    <h2> UserDeckRelation Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>user_deck_relation_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>userUCR_foreignid</td>
        <td>Integer</td>
        <td>Foreign Key (user.user_id), Not Null </td>
      </tr>
      <tr>
        <td>deckUCR_foreignid</td>
        <td>Integer</td>
        <td>Foreign Key (deck.deck_id), Not Null </td>
      </tr>
    </tbody>
    </table>
    
    <h2> CardDeckRelation Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>card_deck_relation_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>cardCDR_foreignid</td>
        <td>Integer</td>
        <td>Foreign Key (card.card_id), Not Null </td>
      </tr>
      <tr>
        <td>deckCDR_foreignid</td>
        <td>Integer</td>
        <td>Foreign Key (deck.deck_id), Not Null </td>
      </tr>      
    </tbody>
    </table>

servers:
  - url: http://127.0.0.1:5000/
paths:
  /api/deck/{email}:
    description: Path to get decks by a user
    get:
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
            example: "test@abc.com"
        - in: header
          name: 'Authentication-Token'
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  deck_id:
                    type: integer
                    example: 1
                  deck_name:
                    type: string
                    example: "Hindi to English translation"
                  deck_total_score:
                    type: number
                    multipleOf: 0.01
                    example: 125.0
                  deck_average_score:
                    type: number
                    multipleOf: 0.01
                    example: 62.5
                  correct:
                    type: number
                    example: 25
                  time:
                    type: string
                    example: "Sat Mar 26 01:23:27 2022"
                  quiz_count:
                    type: integer
                    example: 2
        '404':
          description: User does not exist
        '500':
          description: Internal Server Error
          
  /api/deck/edit/{deck_name}:
    put:
      description: Update Deck Name
      parameters:
        - in: path
          name: deck_name
          required: true
          schema:
            type: string
            example: "old_name"
        - in: header
          name: 'Authentication-Token'
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email_id:
                  type: string
                  example: "test@abc.com"
                deck_name:
                  type: string
                  example: "new_name"
      responses:
        '200':
          description: Deck Name Updated Successfully
        '400':
          description: Old Deck name not specified
        '404':
          description: User has no deck with this name.
        '500':
          description: Internal Server Error
  /api/deck:
    post:
      description: Create a new Deck
      parameters:
        - in: header
          name: 'Authentication-Token'
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email_id:
                  type: string
                  example: "test@abc.com"
                deck_name:
                  type: string
                  example: "new_name"
      responses:
        '200':
          description: Deck Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  deck_id:
                    type: integer
                    example: 1
                  deck_name:
                    type: string
                    example: "Hindi to English translation"
                  deck_total_score:
                    type: number
                    multipleOf: 0.01
                    example: 125.0
                  deck_average_score:
                    type: number
                    multipleOf: 0.01
                    example: 62.5
                  correct:
                    type: number
                    example: 25
                  time:
                    type: string
                    example: "Sat Mar 26 01:23:27 2022"
                  quiz_count:
                    type: integer
                    example: 2
        '409':
          description: You have already created a deck with this name
        '404':
          description: User does not exist
        '500':
          description: Internal Server Error
    delete:
      description: Delete an existing deck
      parameters:
        - in: header
          name: 'Authentication-Token'
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email_id:
                  type: string
                  example: "test@abc.com"
                deck_name:
                  type: string
                  example: "new_name"
      responses:
        '200':
          description: Deck Deleted Successfully
        '404':
          description: Deck Not Found
        '500':
          description: Internal Server Error
  /api/card:
    post:
      description: Add a new card to an existing deck
      parameters:
        - in: header
          name: 'Authentication-Token'
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email_id:
                  type: string
                  example: test@abc.com
                card_front:
                  type: string
                  example: front
                card_back:
                  type: string
                  example: back
                deck_id:
                  type: integer
                  example: 3
      responses:
        '200':
          description: Card added successfully
        '409':
          description: Card already exists
        '404':
          description: User has no such deck
        '500':
          description: Internal Server Error
  /api/card/{card_id}:
    delete:
      description: Delete an existing deck
      parameters:
          - in: path
            name: card_id
            required: true
            schema:
              type: integer
              example: 5
          - in: header
            name: 'Authentication-Token'
            schema:
              type: string
              format: uuid
            required: true
      responses:
        '200':
          description: Card Deleted Succesfully
        '404':
          description: Card Not Found
        '500':
          description: Internal Server Error
  /api/quiz/{email}/{deck_name}:
    get:
      description: Get all cards in a particular deck
      parameters:
          - in: path
            name: email
            required: true
            schema:
              type: string
              example: test@abc.com
          - in: path
            name: deck_name
            required: true
            schema:
              type: string
              example: Hindi to English Translation
          - in: header
            name: 'Authentication-Token'
            schema:
              type: string
              format: uuid
            required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  card_id:
                    type: integer
                    example: 1
                  card_front:
                    type: string
                    example: बिल्ली
                  card_back:
                    type: string
                    example: cat
        '404':
          description: Deck Not Found
        '500':
          description: Internal Server Error
  /api/deck/scoring:
    put:
      description: Add Score Information to Deck
      parameters:
        - in: header
          name: 'Authentication-Token'
          schema:
              type: string
              format: uuid
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deck_id:
                  type: integer
                  example: 1
                correct:
                  type: integer
                  example: 75
      responses:
        '200':
          description: Score updated
        '500':
          description: Internal Server Error

  /api/export/decks/{email}:
    get:
      description: Export all decks created by a user as CSV
      parameters:
        - in: path
          name: email
          required: true
          schema:
              type: string
              example: test@abc.com
        - in: header
          name: 'Authentication-Token'
          schema:
              type: string
              format: uuid
          required: true
      responses:
        '200':
          description: Job Started
  /api/export/cards/{deck_name}/{email}:
    get:
      description: Export all cards in a deck created by a user as CSV
      parameters:
        - in: path
          name: email
          required: true
          schema:
              type: string
              example: test@abc.com
        - in: path
          name: deck_name
          required: true
          schema:
              type: string
              example: Hindi to English Translation
        - in: header
          name: 'Authentication-Token'
          schema:
              type: string
              format: uuid
          required: true
      responses:
        '200':
          description: Job Started