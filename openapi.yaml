openapi: 3.0.0
info:
  title: Flashcard Application Open API Documentation
  version: 1.0.0
  description: >
    This project is a Flashcard application for flashcards generation and
    reviewing. Users can create their decks in which they can create flashcards.
    The front and back of the flashcard are entered by the user while creating
    flashcards. The users can review their flashcards through a quiz and their
    dashboard stores information like their average score on a particular deck,
    last quiz score and last review time.

    <h2> User Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>user_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>username</td>
        <td>String</td>
        <td>Not Null, Unique</td>
      </tr>
      <tr>
        <td>password</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>      
    </tbody>
    </table>
    
    <h2> Card Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>card_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>card_front</td>
        <td>String</td>
        <td>Not Null, Unique</td>
      </tr>
      <tr>
        <td>card_back</td>
        <td>String</td>
        <td>Not Null</td>
      </tr>
      <tr>
        <td>difficulty</td>
        <td>String</td>
        <td></td>
      </tr>      
    </tbody>
    </table>
    
    <h2> Deck Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>deck_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>deck_name</td>
        <td>String</td>
        <td>Not Null, Unique</td>
      </tr>
      <tr>
        <td>deck_total_score</td>
        <td>Integer</td>
        <td></td>
      </tr>
      <tr>
        <td>deck_average_score</td>
        <td>Integer</td>
        <td></td>
      </tr>      
    </tbody>
    </table>
    
    <h2> UserDeckRelation Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>user_deck_relation_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>correct</td>
        <td>Integer</td>
        <td></td>
      </tr>
      <tr>
        <td>time</td>
        <td>String</td>
        <td></td>
      </tr>
      <tr>
        <td>quiz_count</td>
        <td>Integer</td>
        <td></td>
      </tr>    
      <tr>
        <td>userUCR_foreignid</td>
        <td>Integer</td>
        <td>Foreign Key (user.user_id), Not Null </td>
      </tr>
      <tr>
        <td>deckUCR_foreignid</td>
        <td>Integer</td>
        <td>Foreign Key (deck.deck_id), Not Null </td>
      </tr>
    </tbody>
    </table>
    
    <h2> CardDeckRelation Table Schema </h2> 
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
      <tr>
        <td>card_deck_relation_id</td>
        <td>Integer</td>
        <td>Primary Key, Auto Increment</td>
      </tr>
      <tr>
        <td>cardCDR_foreignid</td>
        <td>Integer</td>
        <td>Foreign Key (card.card_id), Not Null </td>
      </tr>
      <tr>
        <td>deckCDR_foreignid</td>
        <td>Integer</td>
        <td>Foreign Key (deck.deck_id), Not Null </td>
      </tr>      
    </tbody>
    </table>

    
    <h2> Error Codes </h2>  <table>
      <thead>
        <th>Resource</th>
        <th>Error Code</th>
        <th>Message</th>
      </thead>
      <tbody>
      <tr>
        <td>Resource</td>
        <td>Error Code</td>
        <td>Message</td>
      </tr>
      </tbody>
    </table>
servers:
  - url: http://127.0.0.1:5000/
paths:
  /api/card/{card_id}:
    description: Path to read a card
    get:
      description: Read a card
      parameters:
        - in: path
          name: card_id
          required: true
          schema:
            type: integer
            example: 1
      operationId: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  card_id:
                    type: integer
                    example: 1
                  card_front:
                    type: string
                    example: 'प्रश्न '
                  card_back:
                    type: string
                    example: question
                  difficulty:
                    type: string
                    example: easy
                  deck_card:
                    type: integer
                    example: 1
        '404':
          description: Card does not exist
        '500':
          description: Internal Server Error
  /api/card:
    description: Path to create a card
    post:
      description: Create a new card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                card_id:
                  type: integer
                  example: 1
                card_front:
                  type: string
                  example: 'प्रश्न '
                card_back:
                  type: string
                  example: question
                difficulty:
                  type: string
                  example: easy
                deck_card:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  card_id:
                    type: integer
                    example: 1
                  card_front:
                    type: string
                    example: 'प्रश्न '
                  card_back:
                    type: string
                    example: question
                  difficulty:
                    type: string
                    example: easy
                  deck_card:
                    type: integer
                    example: 1
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
        '500':
          description: Internal Server Error
  /api/deck/{deck_id}:
    description: Path to read, edit and delete a deck
    get:
      description: Read a deck
      parameters:
        - in: path
          name: deck_id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  deck_id:
                    type: integer
                    example: 1
                  deck_name:
                    type: string
                    example: Hindi to English translation
        '404':
          description: Card Not Found
        '500':
          description: Internal Server Error
    put:
      description: Update Deck Name
      parameters:
        - in: path
          name: deck_id
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deck_id:
                  type: integer
                  example: 1
                deck_name:
                  type: string
                  example: Hindi to English translation
                user_deck:
                  type: integer
                  example : 1
      responses:
        '200':
          description: Deck name updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  deck_id:
                    type: integer
                    example: 1
                  deck_name:
                    type: string
                    example: Hindi to English Cards
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
        '404':
          description: Deck does not exist
        '500':
          description: Internal Server Error
    delete:
      description: Delete an existing deck
      parameters:
        - in: path
          name: deck_id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Deck deleted successfully
        '404':
          description: Deck does not exist
        '500':
          description: Internal Server Error
  /api/deck:
    description: Create a deck
    post:
      description: Create a new deck
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                deck_id:
                  type: integer
                  example: 1
                deck_name:
                  type: string
                  example: Hindi to English translation
      responses:
        '201':
          description: Deck created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deck_id:
                    type: integer
                    example: 1
                  deck_name:
                    type: string
                    example: Hindi to English translation
        '409':
          description: Deck already exists
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                  error_message:
                    type: string
        '500':
          description: Internal Server Error


